name: Build Zen Browser for Fedora

on:
   workflow_dispatch: # Allow manual triggering

permissions:
   contents: write

jobs:
   # First job: Build in container
   build-in-container:
      runs-on: ubuntu-latest
      container: fedora:latest
      outputs:
         new_version: ${{ steps.set-version.outputs.version }}
         updated: ${{ steps.set-version.outputs.updated }}

      steps:
         - name: Check out repository
           uses: actions/checkout@v4

         - name: Install base dependencies
           run: |
              dnf install -y rpm-build rpmdevtools copr-cli git curl go

         - name: Setup RPM build environment
           run: |
              mkdir -p /root/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}

         - name: Configure COPR credentials
           env:
              COPR_CONFIG: ${{ secrets.COPR_CONFIG }}
           run: |
              mkdir -p ~/.config
              echo "$COPR_CONFIG" > ~/.config/copr
              chmod 600 ~/.config/copr

         - name: Run update script
           env:
              RPM_BUILD_ROOT: /root/rpmbuild
           run: |
              # Create directory structure
              mkdir -p /root/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}

              # Create symlink for GitHub Actions environment path
              mkdir -p /github/home
              ln -s /root/rpmbuild /github/home/rpmbuild

              # Copy files to the correct location
              cp zen-browser.spec /root/rpmbuild/SPECS/

              # Compile and run the Go script
              go build -o update-zen-browser update-zen-browser.go
              ./update-zen-browser > /root/rpmbuild/SPECS/update.log 2>&1

         - name: Set version output
           id: set-version
           run: |
              # Check if we have a new version
              if grep -q "New version found" /root/rpmbuild/SPECS/update.log 2>/dev/null || [ -f /root/rpmbuild/SRPMS/*.src.rpm ]; then
                NEW_VERSION=$(grep "^Version:" /root/rpmbuild/SPECS/zen-browser.spec | awk '{print $2}')
                echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
                echo "updated=true" >> $GITHUB_OUTPUT
                # Save the spec file for next job
                mkdir -p /tmp/artifacts
                cp /root/rpmbuild/SPECS/zen-browser.spec /tmp/artifacts/
              else
                echo "updated=false" >> $GITHUB_OUTPUT
              fi

         - name: Archive built RPM
           if: steps.set-version.outputs.updated == 'true'
           uses: actions/upload-artifact@v4
           with:
              name: zen-browser-srpm
              path: /root/rpmbuild/SRPMS/*.src.rpm
              retention-days: 7

         - name: Upload spec file
           if: steps.set-version.outputs.updated == 'true'
           uses: actions/upload-artifact@v4
           with:
              name: spec-file
              path: /tmp/artifacts/zen-browser.spec
              retention-days: 7

   # Second job: Update repository
   update-repository:
      needs: build-in-container
      if: needs.build-in-container.outputs.updated == 'true'
      runs-on: ubuntu-latest

      steps:
         - name: Check out repository
           uses: actions/checkout@v4

         - name: Download spec file
           uses: actions/download-artifact@v4
           with:
              name: spec-file

         - name: Commit and push changes
           run: |
              git config --global user.name "GitHub Action"
              git config --global user.email "action@github.com"
              git add zen-browser.spec
              git commit -m "Update zen-browser spec file to version ${{ needs.build-in-container.outputs.new_version }}"
              git push
